/*
Deployment script for Challenge

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar LoadTestData "true"
:setvar DatabaseName "Challenge"
:setvar DefaultFilePrefix "Challenge"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
PRINT N'Rename refactoring operation with key 0ff8ed21-fcb2-473e-b915-7778a5ff9e6c is skipped, element [dbo].[Book].[Id] (SqlSimpleColumn) will not be renamed to ISBN';


GO
PRINT N'Rename refactoring operation with key 17deeadb-2cb6-4ebc-93f7-f4dcd9c0a90e is skipped, element [dbo].[Author].[Id] (SqlSimpleColumn) will not be renamed to AuthorID';


GO
PRINT N'Rename refactoring operation with key 777bcb37-30d7-4efc-979a-8548c735434b is skipped, element [dbo].[Student].[Id] (SqlSimpleColumn) will not be renamed to StudentID';


GO
PRINT N'Rename refactoring operation with key c2061f51-1d46-4cbf-87ce-553805d8308a is skipped, element [dbo].[Borrow].[Id] (SqlSimpleColumn) will not be renamed to StudentID';


GO
PRINT N'Creating [dbo].[Author]...';


GO
CREATE TABLE [dbo].[Author] (
    [AuthorID]        INT          NOT NULL,
    [AuthorFirstName] VARCHAR (50) NOT NULL,
    [AusthorLastName] VARCHAR (50) NOT NULL,
    [AuthorTFN]       INT          NOT NULL,
    PRIMARY KEY CLUSTERED ([AuthorID] ASC)
);


GO
PRINT N'Creating [dbo].[Book]...';


GO
CREATE TABLE [dbo].[Book] (
    [ISBN]        VARCHAR (50) NOT NULL,
    [Title]       VARCHAR (50) NOT NULL,
    [YearPublish] DATE         NOT NULL,
    [AuthorID]    INT          NOT NULL,
    PRIMARY KEY CLUSTERED ([ISBN] ASC)
);


GO
PRINT N'Creating [dbo].[Borrow]...';


GO
CREATE TABLE [dbo].[Borrow] (
    [StudentID] VARCHAR (50) NOT NULL,
    [ISBN]      VARCHAR (50) NOT NULL,
    CONSTRAINT [PK_Borrow] PRIMARY KEY CLUSTERED ([StudentID] ASC, [ISBN] ASC)
);


GO
PRINT N'Creating [dbo].[Student]...';


GO
CREATE TABLE [dbo].[Student] (
    [StudentID] VARCHAR (50) NOT NULL,
    [FirstName] VARCHAR (50) NOT NULL,
    [LastName]  VARCHAR (50) NOT NULL,
    [Email]     VARCHAR (50) NOT NULL,
    [Phone]     INT          NOT NULL,
    PRIMARY KEY CLUSTERED ([StudentID] ASC)
);


GO
PRINT N'Creating [dbo].[FK_Book_ToTable]...';


GO
ALTER TABLE [dbo].[Book] WITH NOCHECK
    ADD CONSTRAINT [FK_Book_ToTable] FOREIGN KEY ([AuthorID]) REFERENCES [dbo].[Author] ([AuthorID]);


GO
PRINT N'Creating [dbo].[FK_Borrow_ToTable]...';


GO
ALTER TABLE [dbo].[Borrow] WITH NOCHECK
    ADD CONSTRAINT [FK_Borrow_ToTable] FOREIGN KEY ([StudentID]) REFERENCES [dbo].[Student] ([StudentID]);


GO
PRINT N'Creating [dbo].[FK_Borrow_ToTable_1]...';


GO
ALTER TABLE [dbo].[Borrow] WITH NOCHECK
    ADD CONSTRAINT [FK_Borrow_ToTable_1] FOREIGN KEY ([ISBN]) REFERENCES [dbo].[Book] ([ISBN]);


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

IF '$(LoadTestData)' = 'true'

BEGIN

DELETE FROM Borrow;
DELETE FROM Book;
DELETE FROM Author;
DELETE FROM Student;


INSERT INTO Student(StudentID, FirstName, LastName, Email, Phone) VALUES
('s12345678', 'Fred', 'Flintstone', '12345678@student.swin.edu.au ', 0400555111),
('s23456789', 'Barney', 'Rubble ', '23456789@student.swin.edu.au ', 0400555222 ),
('s34567890', 'Bam-Bam', 'Rubble', '23456789@student.swin.edu.au ', 0400555222 );


INSERT INTO Author (AuthorID, AuthorFirstName, AusthorLastName, AuthorTFN) VALUES
(32567 , 'Edgar', 'Codd', 150111222),
(32567 , 'Edgar', 'Codd', 150111222),
(76543 , 'Vinton', 'Cerf', 150222333),
(12345 , 'Alan', 'Turing', 150333444);


INSERT INTO Book(ISBN, Title, YearPublish, AuthorID) VALUES
('978-3-16148410-0', 'Relationships with Databases, the ins and outs', '1970', 32567),
('978-3-16148410-1', 'Normalisation, how to make a database geek fit in.', '1973', 32567), 
('978-3-16148410-2', 'TCP/IP, the protocol for the masses.', '1983', 76543), 
('978-3-16148410-3', 'The Man, the Bombe, and the Enigma.', '1940', 12345);

INSERT INTO Borrow(StudentID, ISBN) VALUES
('s12345678', '978-3-16148410-0'),
('s34567890', '978-3-16148410-0'),
('s23456789', '978-3-16148410-1'),
('s23456789', '978-3-16148410-2');



END;
GO

GO
